class Solution {
    public int uniquePathsWithObstacles(int[][] grid) {
          // int m=grid.length;
          //   int n=grid[0].length;

          //   int dp[][]=new int[m][n];
          //   for(int []a:dp){
          //     Arrays.fill(a,-1);
          //   }

          //   return findPathsMem(grid,0,0,dp);
         
         //TABULATION
          return findPathsTab(grid);


    }

    //TABULATION
    int findPathsTab(int [][] grid){
      int m=grid.length;
      int n=grid[0].length;

        if(grid[m-1][n-1]==1)
           return 0;

      int [][]dp=new int[m][n];
      for(int i=0;i<m;i++){
        if(grid[i][0]!=1){
          dp[i][0]=1;
        }else{
          break;
        }
      }

      for(int i=0;i<n;i++){
         if(grid[0][i]!=1){
          dp[0][i]=1;
        }else{
          break;
        }
      }

      for(int i=1;i<m;i++){
        for(int j=1;j<n;j++){
          if(grid[i][j]==1)
           dp[i][j]=0;
          else
           dp[i][j]=dp[i-1][j]+dp[i][j-1];  
        }
      }

      return dp[m-1][n-1];

      
     }

     //MEMO  0MS
    //  int findPathsMem(int[][]grid,int i,int j,int dp[][]){

    //     int m=grid.length;
    //     int n=grid[0].length;
    //     if(grid[m-1][n-1]==1)
    //        return 0;

    //     if(i==m-1&&j==n-1){
    //         return 1;
    //     }

    //     if(i==m||j==n)
    //       return 0;

    //     if(grid[i][j]==1)
    //       return 0;

    //     if(dp[i][j]!=-1)
    //       return dp[i][j]  ;

    //     int a=findPathsMem(grid,i+1,j,dp);
    //     int b=findPathsMem(grid,i,j+1,dp);

        

    //     return dp[i][j]=a+b;          



    // }


    //RECURSION TLE

    // int findPaths(int[][]grid,int i,int j){

    //     int m=grid.length;
    //     int n=grid[0].length;
    //  if(grid[m-1][n-1]==1)
    //        return 0;

    //     if(i==m-1&&j==n-1){
    //         return 1;
    //     }

    //     if(i==m||j==n)
    //       return 0;

    //     if(grid[i][j]==1)
    //       return 0;

    //     int a=findPaths(grid,i+1,j);
    //     int b=findPaths(grid,i,j+1);

    //     if(a==0&&b==0)
    //       return 0;
    //     if(a==0)
    //       return b;
    //     if(b==0)
    //       return a;

    //     return a+b;          



    // }
}
