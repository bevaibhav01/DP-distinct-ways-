class Solution {
    public boolean canPartition(int[] nums) {
        int sum=0;
        for(int i=0;i<nums.length;i++)
         sum+=nums[i];
        if(sum%2==1)
         return false;



       // return find(nums,0,sum,0);
      
      //TABULATION
       sum=sum/2;
       return findSum(nums,sum);

    }

    //TABULATION 
    boolean findSum(int []nums,int sum){
        int n=nums.length;
        boolean [][]dp=new boolean[n+1][sum+1];

        for(int i=0;i<=n;i++)
          dp[i][0]=true;

        for(int i=1;i<=n;i++){
            for(int j=1;j<=sum;j++){
                if(nums[i-1]<=j && dp[i-1][j-nums[i-1]]==true)
                  dp[i][j]=true;
                else
                 dp[i][j]=dp[i-1][j];  
            }
        }

        return dp[n][sum];  


    }
   

    //RECURSION TLE

    // boolean find(int []nums,int i,int sum,int curr){
    //     if(sum==curr){
    //         return true;
    //     }
    //     if(curr>sum){
    //         return false;
    //     }

    //     if(i==nums.length)
    //       return false;

    //     return find(nums,i+1,sum-nums[i],curr+nums[i])||find(nums,i+1,sum,curr);  
    // }

}
