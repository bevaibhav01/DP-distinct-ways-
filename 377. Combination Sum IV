class Solution {
    public int combinationSum4(int[] nums, int target) {
         int []dp=new int[target+1];
         Arrays.fill(dp,-1);
        return countPathMem(nums,target,dp);
        
    }

    int countPathMem(int []nums,int target,int dp[]){
        int n=nums.length;
        if(target==0){
            return 1;
        }
        if(target<0){
            return 0;
        }
        if(dp[target]!=-1)
         return dp[target];
         
        int ans=0;

        for(int i=0;i<n;i++){
           dp[target]+=countPathMem(nums,target-nums[i],dp);
        }

        return ++dp[target];


        
    }


    //RECURSION TLE
    // int countPath(int []nums,int target){
    //     int n=nums.length;
    //     if(target==0){
    //         return 1;
    //     }
    //     if(target<0){
    //         return 0;
    //     }
    //     int ans=0;

    //     for(int i=0;i<n;i++){
    //        ans+=countPath(nums,target-nums[i]);
    //     }

    //     return ans;


        
    // }
}
